; An exercise solution for the SICP, 2nd edition
;
; Copyright (C) 2021 Tongjie Liu <tongjieandliu@gmail.com>.
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <https://www.gnu.org/licenses/>.

(rule (last-pair (?x) (?x)))


;     We have to define the first argument of the second rule(for making
; reduction steps) in the form of a list containing at least two items,
; since the form in dotted notation "(?x . ?y)" may represent a list con-
; taining only one item, and that will make the formal parameters become
; the same as the first rule above, then there is no way to choose a rule
; to apply in the final step when we have a list of only one item as the
; first argument.
(rule (last-pair (?x ?y . ?z) ?last)
    (append-to-form (?y) ?z ?y-z)
    (last-pair ?y-z ?last))
